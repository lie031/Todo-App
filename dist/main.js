(()=>{"use strict";class t{project=null;constructor(t,e,s,c){this.title=t,this.description=e,this.date=s,this.priority=c}setProject(t){this.project=t}}class e{constructor(t){this.name=t,this.taskList=[]}addTask(t){this.taskList.push(t)}}class s{static projects=[];static tasks=[];static saveProjects(){localStorage.setItem("projects",JSON.stringify(s.projects))}static saveTask(){localStorage.setItem("tasks",JSON.stringify(s.tasks))}static loadProjects(){const t=localStorage.getItem("projects");if(t){const c=JSON.parse(t);s.projects=c.map((t=>{const s=new e(t.name);return s.taskList=t.taskList,s}))}else s.createDefaultProject()}static loadTasks(){const t=localStorage.getItem("tasks");t&&(s.tasks=JSON.parse(t))}static createDefaultProject(){const t=new e("Default Project");s.projects.push(t),s.saveProjects()}}function c(t){const e=document.querySelector(".projects"),s=document.createElement("div");s.classList.add("project"),s.innerHTML=`\n        <span class="project-name">${t}</span>\n        <button class="delete-project deleteBtn"><i class="fas fa-trash-alt"></i></button>\n    `,e.appendChild(s)}function o(t,e){const s=document.querySelector(".tasks"),c=document.createElement("div");c.classList.add("task"),c.innerHTML=`\n        <div class="task-info">\n            <span class="task-title">${t}</span>\n            <span class="task-date">${e}</span>\n        </div>\n        <button class="delete-task deleteBtn"><i class="fas fa-trash-alt"></i></button>\n    `,s.appendChild(c)}s.loadProjects(),document.addEventListener("DOMContentLoaded",(()=>{const a=document.querySelector(".createProjectBtn"),n=document.querySelector(".projectName"),r=document.getElementById("taskModal"),l=document.querySelector(".createTaskBtn"),i=document.querySelector(".taskTitle"),d=document.querySelector(".taskDescription"),u=document.querySelector(".taskDate"),p=document.querySelector(".taskPriority"),m=document.querySelector(".projects"),j=document.querySelector(".tasks"),k=document.querySelector(".openModalBtn"),v=document.querySelector(".modal .close");a.addEventListener("click",(()=>{const t=n.value.trim();t&&(function(t){const c=new e(t);s.projects.push(c),s.saveProjects()}(t),c(t),n.value="",console.log("Project created"))})),k.addEventListener("click",(()=>{r.style.display="block"})),v.addEventListener("click",(()=>{r.style.display="none"})),window.addEventListener("click",(t=>{t.target===r&&(r.style.display="none")})),l.addEventListener("click",(()=>{const e=document.querySelector(".project.active");if(e){const c=e.querySelector(".project-name").textContent.trim(),a=i.value.trim(),n=d.value.trim(),l=u.value,m=p.value;a&&n&&l&&m&&(function(e,c,o,a,n){const r=new t(c,o,a,n),l=s.projects.find((t=>t.name===e));l&&(l.addTask(r),s.saveProjects())}(c,a,n,l,m),o(a,l),i.value="",d.value="",u.value="",p.value="",r.style.display="none",console.log("Task created"))}})),m.addEventListener("click",(t=>{const e=t.target.closest(".project");e&&(t.target.classList.contains("delete-project")||t.target.closest(".delete-project")?(function(t){const e=s.projects.findIndex((e=>e.name===t));e>-1&&(s.projects.splice(e,1),s.saveProjects())}(e.querySelector(".project-name").textContent.trim()),e.remove(),j.innerHTML=""):(document.querySelectorAll(".project").forEach((t=>t.classList.remove("active"))),e.classList.add("active"),function(t){document.querySelector(".tasks").innerHTML="";const e=s.projects.find((e=>e.name===t));e&&e.taskList.forEach((t=>{o(t.title,t.date)}))}(e.querySelector(".project-name").textContent.trim())))})),j.addEventListener("click",(t=>{const e=t.target.closest(".task");if(e&&(t.target.classList.contains("delete-task")||t.target.closest(".delete-task"))){const t=e.querySelector(".task-title").textContent.trim(),c=document.querySelector(".project.active");c&&(function(t,e){const c=s.projects.find((e=>e.name===t));if(c){const t=c.taskList.findIndex((t=>t.title===e));t>-1&&(c.taskList.splice(t,1),s.saveProjects())}}(c.querySelector(".project-name").textContent.trim(),t),e.remove())}})),s.loadProjects(),s.projects.forEach((t=>{c(t.name)}))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,