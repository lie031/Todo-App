(()=>{"use strict";class t{project=null;constructor(t,e,s,c){this.title=t,this.description=e,this.date=s,this.priority=c}setProject(t){this.project=t}}class e{constructor(t){this.name=t,this.taskList=[]}addTask(t){this.taskList.push(t)}}class s{static projects=[];static tasks=[];static saveProjects(){localStorage.setItem("projects",JSON.stringify(s.projects))}static saveTask(){localStorage.setItem("tasks",JSON.stringify(s.tasks))}static loadProjects(){const t=localStorage.getItem("projects");if(t){const c=JSON.parse(t);s.projects=c.map((t=>{const s=new e(t.name);return s.taskList=t.taskList,s}))}else s.createDefaultProject()}static loadTasks(){const t=localStorage.getItem("tasks");t&&(s.tasks=JSON.parse(t))}static createDefaultProject(){const t=new e("Default Project");s.projects.push(t),s.saveProjects()}}function c(t){const e=document.querySelector(".projects"),s=document.createElement("div");s.textContent=t,s.classList.add("project"),e.appendChild(s)}function o(t){const e=document.querySelector(".tasks"),s=document.createElement("div");s.textContent=t,s.classList.add("task"),e.appendChild(s)}function a(t){document.querySelector(".tasks").innerHTML="";const e=s.projects.find((e=>e.name===t));e&&e.taskList.forEach((t=>{o(t.title)}))}s.loadProjects(),function(){const r=document.querySelector(".createProjectBtn"),n=document.querySelector(".projectName"),i=document.getElementById("taskModal"),l=document.querySelector(".createTaskBtn"),d=document.querySelector(".taskTitle"),u=document.querySelector(".taskDescription"),m=document.querySelector(".taskDate"),p=document.querySelector(".taskPriority"),j=document.querySelector(".projects"),k=document.querySelector(".openModalBtn"),y=document.querySelector(".modal .close");r.addEventListener("click",(()=>{const t=n.value.trim();t&&(function(t){const c=new e(t);s.projects.push(c),s.saveProjects()}(t),c(t),n.value="",console.log("Project created"))})),k.addEventListener("click",(()=>{i.style.display="block"})),y.addEventListener("click",(()=>{i.style.display="none"})),window.addEventListener("click",(t=>{t.target===i&&(i.style.display="none")})),l.addEventListener("click",(()=>{const e=document.querySelector(".project.active");if(e){const c=e.textContent.trim(),a=d.value.trim(),r=u.value.trim(),n=m.value,l=p.value;a&&r&&n&&l&&(function(e,c,o,a,r){const n=new t(c,o,a,r),i=s.projects.find((t=>t.name===e));i&&(i.addTask(n),s.saveProjects())}(c,a,r,n,l),o(a),d.value="",u.value="",m.value="",p.value="",i.style.display="none",console.log("Task created"))}})),j.addEventListener("click",(t=>{t.target.classList.contains("project")&&(document.querySelectorAll(".project").forEach((t=>t.classList.remove("active"))),t.target.classList.add("active"),a(t.target.textContent.trim()))})),function(){if(s.loadProjects(),s.projects.forEach((t=>{c(t.name)})),s.projects.length>0){const t=document.querySelector(".project");t.classList.add("active"),a(t.textContent.trim())}}()}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,